package examples;

import java.io.File;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import org.apache.commons.geometry.euclidean.threed.Plane;
import org.apache.commons.geometry.euclidean.threed.Planes;
import org.apache.commons.geometry.euclidean.threed.Vector3D;
import org.apache.commons.geometry.euclidean.threed.line.Line3D;
import org.apache.commons.geometry.euclidean.threed.line.Lines3D;
import org.apache.commons.geometry.euclidean.threed.mesh.TriangleMesh;
import org.apache.commons.geometry.io.euclidean.threed.obj.ObjTriangleMeshReader;
import org.apache.commons.numbers.core.Precision;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Model;
import org.linkedbuildingdata.ifc2lbd.IFCtoLBDConverter;

import processing.core.PApplet;

/*
 *  Copyright (c) 2024 Jyrki Oraskari (Jyrki.Oraskari@gmail.f)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Example how to create 2D linegraph of the building  
 *
 * This is the complete demo. You need to install jogamp-fat.jar
 * into LIBs/ to get this functioning and add Maven dependencies
 * 
 
  <!-- Dependency for Processing core library -->
  <dependency>
    <groupId>org.processing</groupId>
    <artifactId>core</artifactId>
    <version>3.3.7</version>
  </dependency>

  <!-- Dependency for JogAmp library -->
  <dependency>
    <groupId>org.jogamp</groupId>
    <artifactId>jogamp-fat</artifactId>
    <version>2.4.0</version>
    <scope>system</scope>
    <systemPath>${basedir}/LIBs/jogamp-fat.jar</systemPath>
   </dependency>
*/
  
/*   
   The cut plane heigh is controlled by the second argument of extract_2dlines(decodedString, height); 
 *  
 */

public class Example14 extends PApplet {
	static final private int props_level = 1;
	static final private boolean hasBuildingElements = true;
	static final private boolean hasBuildingProperties = true;

	static final boolean hasSeparateBuildingElementsModel = false;
	static final boolean hasPropertiesBlankNodes = false;
	static final boolean hasSeparatePropertiesModel = false;

	static final boolean hasGeolocation = false;

	static final boolean hasGeometry = true;
	static final boolean exportIfcOWL = false;
	static final boolean hasUnits = false;

	static final boolean hasPerformanceBoost = false;
	static final boolean hasBoundingBoxWKT = false;

	class Line {
		final Vector3D a;
		final Vector3D b;

		public Line(Vector3D a, Vector3D b) {
			super();
			this.a = a;
			this.b = b;
		}

	}

	List<Line> crossing_lines = new ArrayList<>();
	

	public void setup() {
	}

	// line(50, 50, 150, 150); // Draw the line
	float xmin = Float.POSITIVE_INFINITY;
	float ymin = Float.POSITIVE_INFINITY;
	float zmin = Float.POSITIVE_INFINITY;

	float xmax = Float.NEGATIVE_INFINITY;
	float ymax = Float.NEGATIVE_INFINITY;
	float zmax = Float.NEGATIVE_INFINITY;

	public void settings() {
		// size(600, 600, P3D); // Set up a 3D canvas
		size(600, 600); // Set up a 3D canvas
		readAndProcessIFC();
		System.out.println("crossing_lines: " + crossing_lines.size());

		xmin = Float.POSITIVE_INFINITY;
		ymin = Float.POSITIVE_INFINITY;
		zmin = Float.POSITIVE_INFINITY;

		xmax = Float.NEGATIVE_INFINITY;
		ymax = Float.NEGATIVE_INFINITY;
		zmax = Float.NEGATIVE_INFINITY;
		
		for (Line line : crossing_lines) {
			float x1 = (float) line.a.getX();
			float y1 = (float) line.a.getY();
			float z1 = (float) line.a.getZ();

			if (x1 < xmin)
				xmin = x1;
			if (x1 > xmax)
				xmax = x1;

			if (y1 < ymin)
				ymin = y1;
			if (y1 > ymax)
				ymax = y1;

			if (z1 < zmin)
				zmin = z1;
			if (z1 > zmax)
				zmax = z1;

			float x2 = (float) line.b.getX();
			float y2 = (float) line.b.getY();
			float z2 = (float) line.b.getZ();

			if (x2 < xmin)
				xmin = x2;
			if (x2 > xmax)
				xmax = x2;

			if (y2 < ymin)
				ymin = y2;
			if (y2 > ymax)
				ymax = y2;

			if (z2 < zmin)
				zmin = z2;
			if (z2 > zmax)
				zmax = z2;
		}

		System.out.println(xmin);
		System.out.println(xmax);

		System.out.println(ymin);
		System.out.println(ymax);

		System.out.println(zmin);
		System.out.println(zmax);
		
		
		if(xmin == Float.POSITIVE_INFINITY)
			System.exit(1);
		if(ymin == Float.POSITIVE_INFINITY)
			System.exit(1);
		if(zmin == Float.POSITIVE_INFINITY)
			System.exit(1);

		if(xmax == Float.NEGATIVE_INFINITY)
			System.exit(1);
		if(ymax == Float.NEGATIVE_INFINITY)
			System.exit(1);
		if(zmax == Float.NEGATIVE_INFINITY)
			System.exit(1);
	}

	int inx = 0;

	@Override
	public void draw() {
		background(255);
		stroke(0);

		float scalex = xmax - xmin;
		float scaley = ymax - ymin;
		float scalez = zmax - zmin;

	    float maxscale= Math.max(scalex, scaley);
	    maxscale= Math.max(maxscale, scalez);
		
		for (Line line : crossing_lines) {
			float x1 = ((float) (xmax-line.a.getX()) - xmin) / maxscale * 400 +100;
			float y1 = ((float) line.a.getY() - ymin) / maxscale * 400 +100;
			float z1 = ((float) line.a.getZ() - zmin) / maxscale * 400 +100;

			float x2 = ((float) (xmax-line.b.getX()) - xmin) / maxscale * 400 +100;
			float y2 = ((float) line.b.getY() - ymin) / maxscale * 400 +100;
			float z2 = ((float) line.b.getZ() - zmin) / maxscale * 400 +100;

			if (inx < 10)
				System.out.println(x1 + "," + y1 + " .. " + x2 + "," + y2);
			inx++;
			line(x1, y1, x2, y2);
		}

		
	
	}

	boolean done=false;
	private void readAndProcessIFC() {

		URL ifc_file_url = ClassLoader.getSystemResource("Duplex_A.ifc");
		try {
			File ifc_file = new File(ifc_file_url.toURI());

			try (IFCtoLBDConverter c = new IFCtoLBDConverter("https://example.com/", hasPropertiesBlankNodes,
					props_level);) {
				Model m = c.convert(ifc_file.getAbsoluteFile().toString(), null, hasBuildingElements,
						hasSeparateBuildingElementsModel, hasBuildingProperties, hasSeparatePropertiesModel,
						hasGeolocation, hasGeometry, exportIfcOWL, hasUnits, hasPerformanceBoost, hasBoundingBoxWKT);
				if (m != null) {
					Query query = QueryFactory.create("""
							PREFIX fog: <https://w3id.org/fog#>\r
							PREFIX beo: <https://pi.pauwel.be/voc/buildingelement#>\r
							\r
							SELECT ?e ?obj WHERE {\r
							  ?e <https://w3id.org/omg#hasGeometry> ?g .\r
							  ?e a beo:Wall .\r
							  ?g fog:asObj_v3.0-obj ?obj \r
							}\s""");
					try (QueryExecution queryExecution = QueryExecutionFactory.create(query, m)) {
						ResultSet rs = queryExecution.execSelect();
						rs.forEachRemaining(qs -> {
							System.out.println("BOT element: " + qs.get("e").asResource().getLocalName());
							// System.out.println("BOT element OBJ: " + qs.get("obj"));
							byte[] decodedBytes = Base64.getDecoder()
									.decode(qs.get("obj").asLiteral().getLexicalForm());
							String decodedString = new String(decodedBytes);
							// System.out.println(decodedString);
							//if(!done)
							  extract_2dlines(decodedString, 4);
							if(this.crossing_lines.size()>0)
							 done=true;
						});
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void extract_2dlines(String objfilecontent, double elevation) {
		Precision.DoubleEquivalence precision = Precision.doubleEquivalenceOfEpsilon(1e-6);

		final Plane plane = Planes.fromPointAndNormal(Vector3D.of(0, 0, elevation), Vector3D.Unit.PLUS_Z, precision);

		Reader input = new StringReader(objfilecontent);
		ObjTriangleMeshReader reader = new ObjTriangleMeshReader(input, precision);

		TriangleMesh mesh = reader.readTriangleMesh();

		for (TriangleMesh.Face t : mesh.getFaces()) {
			// get the vertices of the triangle
			Vector3D a = t.getPoint1();
			Vector3D b = t.getPoint2();
			Vector3D c = t.getPoint3();

			// check if the plane intersects any of the edges
			Vector3D ab = plane.intersection(Lines3D.fromPoints(a, b, precision));
			Vector3D bc = plane.intersection(Lines3D.fromPoints(b, c, precision));
			Vector3D ca = plane.intersection(Lines3D.fromPoints(c, a, precision));

			Line3D interplane = t.getPolygon().getPlane().intersection(plane);

			// add the intersection point lines to the list
			System.out.println(a + "-" + b);
			if (ab != null && bc != null && !ab.vectorTo(bc).isZero(precision)) {
				if(t.getPolygon().contains(ab)&&t.getPolygon().contains(bc)) 
					if(interplane.contains(ab)&&interplane.contains(bc)) {
				//if (between(a, ab, b) && between(b, bc, c)) {
					Line line3d = new Line(ab, bc);
					crossing_lines.add(line3d);
					
				
				}
			}

			if (bc != null && ca != null && !bc.vectorTo(ca).isZero(precision)) {
				if(t.getPolygon().contains(bc)&&t.getPolygon().contains(ca)) 
					if(interplane.contains(bc)&&interplane.contains(ca)) {
				//if (between(b, bc, c) && between(c, ca, a)) {
					Line line3d = new Line(bc, ca);
					crossing_lines.add(line3d);
					
				

				}
			}

			
			
			if (ca != null && ab != null && !ca.vectorTo(ab).isZero(precision)) {
				if(t.getPolygon().contains(ca)&&t.getPolygon().contains(ab)) 
				if(interplane.contains(ca)&&interplane.contains(ab)) {
				//if (between(c, ca, a) && between(a, ab, b)) {
					Line line3d = new Line(ca,ab);
					crossing_lines.add(line3d);
					

				}
			}

		}
	}

	private boolean between(Vector3D a, Vector3D b, Vector3D c) {
		double maxx = a.getX() > c.getX() ? a.getX() : c.getX();
		double minx = a.getX() < c.getX() ? a.getX() : c.getX();

		double maxy = a.getY() > c.getY() ? a.getY() : c.getY();
		double miny = a.getY() < c.getY() ? a.getY() : c.getY();

		double maxz = a.getZ() > c.getZ() ? a.getZ() : c.getZ();
		double minz = a.getZ() < c.getZ() ? a.getZ() : c.getZ();

		if (b.getX() >= minx && b.getX() <= maxx)
			if (b.getY() >= miny && b.getY() <= maxy)
				if (b.getZ() >= minz && b.getZ() <= maxz)
					return true;

		return false;
	}

	public static void main(String[] args) {
		PApplet.main(Example14.class.getName());
	}

}